MIS 515- Spring 2016
 
Java programming Assignment #1.  Partial program due February 17 at beginning of class (see at end).  Complete program due February 24.  Team-optional (2 students)

Objectives: User-defined classes, if-else, while-loop, for-loop 
DELIVERABLES: 1) A hard copy of the program correctly indented (see directions at end of this text).  2) A listing of input/output execution, easy to read (see directions at end of copy.  3) have your program ready to be executed in class for demonstration and questions
 
GoodBuyy is a purchasing organization with members.  Any member can buy items at GoodBuyy stores.  The member can get credit for the full purchase, or pay it in part or totally.  GoodBuyy keeps track of the information for each member in an object of the class Account.  Each member has his/her own credit limit.  If a purchase with credit would result in going over the credit limit, the purchase with credit is not permitted and the member is told so; in this case, a $10penalty is charged to the account.  Members can pay their balance-due (in part or in total) anytime.   A member can also take cash out without purchase. The credit limit rule and penalty apply here too.

Write a Java program to define the class Account  and the program to test it.
 
At the minimum, the Account class will include the following elements
 Fields (all private) ( = instance variables)
 
Account number (int)
Customer last name, first Name
Credit limit
beginning balance (double)
current balance (double)
end balance (double) 
(for the three types of balance, a negative balance indicates that the member owes  GoodBuyy.  A positive value indicates that GoodBuyy owes the member)
   
number of purchases  (int)
number of transactions (int) (a transaction is a purchase or a payment without purchase; a denied purchase is counted as a transaction; borrowing, denied or not is counted as a transaction)
total purchase sum (double)
total payments (double)
 
Feel free to add extra fields that are needed.   
 
 
Methods: 
 1)Constructor: Will initialize Account Number, Last Name, First Name, credit limit
2) After creating an Account object, set the beginning balance in that object using a set method 
3) get and set methods that are needed
4) various methods to process a transaction
5) printStatement: display the values of the fields listed above.   
6) Other methods that you feel are useful.
 
The test program will read the data for 5  members and will invoke the needed methods.  We will assume five Account objects  and 5 variables referring to those  5 objects,  declared in the test program.  The program will also read transactions. 

Transactions (must be entered in the order of data shown).  (The first number of a transaction is a numeric code : 1 for purchase, 2 for payment without purchase, 3 for bowing without purchase, 0 for end of transaction for current Account.     For a purchase, the code 1 is followed by two double values: cost of purchase, value of payment.  For a payment without purchase, the code 2 is followed by the value of the payment. For  borrowing without purchase, the code 3 is followed by the amount the meber wish to borrow.
The ** that are shown are provided to you to facilitate the reading of the data.  They are not part of the program execution 
  
Account number: 1111
Customer Last name, First Name: Nutty, Donald 1000
Beginning balance   - 500
Transactions: 1  650    300   *** 3 600 **  0

  Account number: 2222
Customer Last name, First Name credit limit:  Elope, Tanya  2000
Beginning balance   -200
Transactions: 2 100  ***    1 200 200  ***   2 150  ***  1  400  0 ***  1 3000 100 *** 0
  
  Account number: 3333
Customer Last name, First Name:  Grown, Paula  1000
Beginning balance  + 600
Transactions:  0  (no transactions)
 
   Account number: 4444 
Customer Last name, First Name:  Kent, Patty 1500
Beginning balance   -1200
  transactions 1 250   250  ** 2 200 ***    2 300 **   2 100  **  1 2200 0 ***   0
 
    Account number: 5555 
Customer Last name, First Name:  Green, Becky 1000
Beginning balance   -500  ******  transactions 1 900  0  ** 3 1500 ***    0

 
Input/output:.  At your choice:  use the classes System and Scanner;   or a GUI
 
 Explanations
 
Test Program structure
The test program reads the data and displays the various results and messages (and invokes the methods as needed).  All other processing take place using the Account methods. 
 1. An outer loop (while loop or for loop).  The code inside the outer loop  is executed 5 times, once for each member
 
2. An inner loop (a  while-loop nested in the for-loop).  This while loop reads the transactions for a member and invokes the methods to perform the appropriate processing needed for the member
 
The following is a skeleton of the code for the test program, you need to fill-in where needed and make sure the syntax works.  This program structure will avoid repeating the same code for each account.

int transactionCode;
Account acct, acct1, acct2, acct3, acct4, acct5;
 
for (int i =1;    ……………)  
 {         prompt for and  read Account number, last name, first name credit limit;
           acct = new Account( 4 arguments here for Account number, last name, first      
     name, credit limit);
 
             prompt to read beginning balance- set beginning balance in Account
             
            Prompt for transaction
 Read transactionCode 
 While  (transactionCode. != 0) 
{       test transaction code, read two data for code ==1, 
        one data for code = =2 or code == 3
            and process transaction
            
            Read transaction code
}  //end while loop
 
Invoke some  more methods on the Account object if needed
 
 “Save” the reference to the current  Account object.  For example:
 
If(i==1) acct1 = acct; //at end of first iteration of the outer loop
If(i==2) acct2 = acct; //at end of second iteration of the outer loop
…………
If(i==5) acct5 = acct; //at end of fifth iteration of the outer loop

…………………..
} //end for-loop
 
At this point we have 5 Account objects, referred to by 5 variables acct1, acct2, acct3, acct4, acct5.
Using the printStatement() method of the class Account, display the information for each Account.
 
  
How to develop the program in two steps:
 
1) start the test program with one Account (one object only referred to by one reference variable),  ignoring the outer loop.   
  You can then execute the program five times, once for each Account, and verify that it works properly.  This is a 8.5/10, B+ if you stop here and the program works properly
2) modify the test program, by adding the outer loop, declaring five reference variables (one for each Account), and creating and processing the five objects for the five Accounts.
1.     DO NOT USE ARRAYS (although their use would be appropriate for this problem)
2.     The use of  the reference variable called “acct” avoids the duplication of the same code for each of the 5 Accounts. If you do not understand how it works, please ask me for an explanation.
 
Program presentation.  I will not give credit to programs that do not follow the following guidelines.  
    Indentation: as, for example, programs 3.8, 3.9, 4.12 (while-loop), 5.6 (for-loop) of the textbook.
       If a statement starting wraps around and “breaks” the indentation, make sure that you edit it, so that the correct indentation is still respected.
   
    Each class starts at top of page.  Highlight the header of the class
 
    Methods.  Each method must be completely contained on one page (a possible exception could be the main method).   If it is too long to fit one page, cut it at a logical point in the program, such the end of a loop).  Highlight each method header. Draw a rectangle around each method.  If the methods of a class are short, have them on the same page as much as possible.  Remove getters and setters that are not called.
 
Code should be compact.  Use blank lines very sparingly.   
Comments and readability.  Give meaningful names to variables and methods (names should tell about the problem at hand, not the language)
Provide very short comments for logical blocks of code (again, the comments must be about the problem being solved, not about the language)

The output of your program execution must be easy to read.  Formatting may be done by program , or by hand.

1) Clearly separate the input of data from the output of results (performed by the printStatement method)
2) clearly separate the input data for each Account

3) clearly separate the results for each Account


Partial program due February 17: at a minimum a working program for account 1111, with same program presentation and input/output formatting described above.

